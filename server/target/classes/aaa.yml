#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        ringBufferSizeInClosedState: 5 # 熔断器关闭时的缓冲区大小
#        ringBufferSizeInHalfOpenState: 2 # 熔断器半开时的缓冲区大小
#        waitDurationInOpenState: 10000 # 熔断器从打开到半开需要的时间
#        failureRateThreshold: 60 # 熔断器打开的失败阈值
#        eventConsumerBufferSize: 10 # 事件缓冲区大小
#        registerHealthIndicator: true # 健康监测
#        automaticTransitionFromOpenToHalfOpenEnabled: false # 是否自动从打开到半开，不需要触发
#        recordFailurePredicate:    com.example.resilience4j.exceptions.RecordFailurePredicate # 谓词设置异常是否为失败
#        recordExceptions: # 记录的异常
#          - com.example.resilience4j.exceptions.BusinessBException
#          - com.example.resilience4j.exceptions.BusinessAException
#        ignoreExceptions: # 忽略的异常
#          - com.example.resilience4j.exceptions.BusinessAException
#    instances:
#      backendA:
#        baseConfig: default
#        waitDurationInOpenState: 5000
#        failureRateThreshold: 20
#      backendB:
#        baseConfig: default


#  retry:
#    retry-aspect-order: 399 # 表示retry优先级，一般retry优先级高于限流和断路器
#    backends:
#      retryA:
#        maxRetryAttempts: 5 # 重试次数
#        waitDuration: 500 # 重试等待时间
#        exponentialBackoffMultipliter: 1.1 # 间隔乘数
#        retryException:
#          - java.lang.RuntimeException


###################################

#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        ringBufferSizeInClosedState: 5 # 熔断器关闭时的缓冲区大小
#        ringBufferSizeInHalfOpenState: 2 # 熔断器半开时的缓冲区大小
#        waitDurationInOpenState: 10000 # 熔断器从打开到半开需要的时间
#        failureRateThreshold: 60 # 熔断器打开的失败阈值
#        eventConsumerBufferSize: 10 # 事件缓冲区大小
#        registerHealthIndicator: true # 健康监测
#        automaticTransitionFromOpenToHalfOpenEnabled: false # 是否自动从打开到半开，不需要触发
#        recordFailurePredicate:    com.example.resilience4j.exceptions.RecordFailurePredicate # 谓词设置异常是否为失败
#        recordExceptions: # 记录的异常
#          - com.example.resilience4j.exceptions.BusinessBException
#          - com.example.resilience4j.exceptions.BusinessAException
#        ignoreExceptions: # 忽略的异常
#          - com.example.resilience4j.exceptions.BusinessAException
#    instances:
#      backendA:
#        baseConfig: default
#        waitDurationInOpenState: 5000
#        failureRateThreshold: 20
#      backendB:
#        baseConfig: default
#
#
#  timelimiter:
#    timeoutDuration: 3000 # 超时时长
#    cancelRunningFuture: true # 发生异常是否关闭线程
#
#
#resilience4j:
#  retry:
#    configs:
#      default:
#      maxRetryAttempts: 3
#      waitDuration: 10s
#      enableExponentialBackoff: true    # 是否允许使用指数退避算法进行重试间隔时间的计算
#      expontialBackoffMultiplier: 2     # 指数退避算法的乘数
#      enableRandomizedWait: false       # 是否允许使用随机的重试间隔
#      randomizedWaitFactor: 0.5         # 随机因子
#      resultPredicate: com.example.resilience4j.predicate.RetryOnResultPredicate
#      retryExceptionPredicate: com.example.resilience4j.predicate.RetryOnExceptionPredicate
#      retryExceptions:
#        - com.example.resilience4j.exceptions.BusinessBException
#        - com.example.resilience4j.exceptions.BusinessAException
#        - io.github.resilience4j.circuitbreaker.CallNotPermittedException
#      ignoreExceptions:
#        - io.github.resilience4j.circuitbreaker.CallNotPermittedException
#      instances:
#        backendA:
#          baseConfig: default
#          waitDuration: 5s
#        backendB:
#          baseConfig: default
#          maxRetryAttempts: 2
#
#
#resilience4j:
#  bulkhead:
#    configs:
#      default:
#        maxConcurrentCalls: 10
#        maxWaitDuration: 1000
#    instances:
#      backendA:
#        baseConfig: default
#        maxConcurrentCalls: 3
#      backendB:
#        baseConfig: default
#        maxWaitDuration: 100
#
#
#resilience4j:
#  ratelimiter:
#    configs:
#      default:
#        limitForPeriod: 5
#        limitRefreshPeriod: 1s
#        timeoutDuration: 5s
#    instances:
#      backendA:
#        baseConfig: default
#        limitForPeriod: 1
#      backendB:
#        baseConfig: default
#        timeoutDuration: 0s


###################################

resilience4j.retry:
  instances:
    backendA:
      maxAttempts: 3
      waitDuration: 10s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
      ignoreExceptions:
        - io.github.robwin.exception.BusinessException
    backendB:
      maxAttempts: 3
      waitDuration: 10s
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
      ignoreExceptions:
        - io.github.robwin.exception.BusinessException

resilience4j.bulkhead:
  instances:
    backendA:
      maxConcurrentCalls: 10
    backendB:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
  instances:
    backendC:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

resilience4j.ratelimiter:
  instances:
    backendA:
      limitForPeriod: 10
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      registerHealthIndicator: true
      eventConsumerBufferSize: 100
    backendB:
      limitForPeriod: 6
      limitRefreshPeriod: 500ms
      timeoutDuration: 3s

resilience4j.timelimiter:
  instances:
    backendA:
      timeoutDuration: 2s
      cancelRunningFuture: true
    backendB:
      timeoutDuration: 1s
      cancelRunningFuture: false